{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nlet WorkOrdersComponent = class WorkOrdersComponent {\n  constructor(workOrderService, technicianService, router, formBuilder) {\n    this.workOrderService = workOrderService;\n    this.technicianService = technicianService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.newform = FormsModule;\n  }\n  /**\r\n   * Calls the getWorkOrders, getTechnicians, and getStatusList\r\n   * functions after the page loads to ensure the call doesn't\r\n   * return empty due the the page load order\r\n  */\n  ngOnInit() {\n    this.getOpenWorkOrders();\n    this.getTechnicians();\n    this.getStatusList();\n  }\n  /**\r\n   * Generates a list of all work orders from a table if records are available\r\n   */\n  getAllWorkOrders() {\n    this.workOrderService.getWorkOrders().subscribe(workOrders => {\n      if (workOrders.length > 0) {\n        this.workOrders = workOrders;\n      }\n    });\n  }\n  /**\r\n   * Generates a list of open work orders from a table if records are available\r\n   */\n  getOpenWorkOrders() {\n    this.workOrderService.getFilteredWorkOrders(\"Assigned\").subscribe(workOrders => {\n      if (workOrders.length > 0) {\n        this.workOrders = workOrders;\n      }\n    });\n  }\n  /**\r\n   * Filters the workorder query by status value\r\n   */\n  getFilteredWorkOrders(status) {\n    this.workOrderService.getFilteredWorkOrders(status).subscribe(workOrders => {\n      if (workOrders.length > 0) {\n        this.workOrders = workOrders;\n      }\n    });\n  }\n  /**\r\n   * Re-routes the user to a detailed page for the\r\n   * selected work order\r\n   * @param id\r\n   */\n  orderDetail(id) {\n    this.router.navigateByUrl('orders/order/' + id);\n  }\n  /**\r\n   * Re-routes the user to a detailed page for the\r\n   * selected technician\r\n   * @param id\r\n   */\n  techDetail(id) {\n    this.router.navigateByUrl('techs/tech/' + id);\n  }\n  /**\r\n   * This method updates the workorder table by adding a new record\r\n   */\n  addWorkOrder() {\n    // TODO  get new workorder number thru wo-service\n    //this.newOrder!.dateReceived = new Date();\n    //console.log(this.newOrder);\n    //this.workOrderService.createWorkOrder(this.newOrder!);\n  }\n  /**\r\n   * Returns a list of available statuses present in the workOrders\r\n   * table\r\n   */\n  getStatusList() {\n    this.workOrderService.getStatuses().subscribe(statuses => {\n      if (statuses.length > 0) {\n        this.statuses = statuses;\n      }\n    });\n  }\n  /**\r\n   * Returns a list of technicians available from the\r\n   * technicians table\r\n   */\n  getTechnicians() {\n    this.technicianService.getTechnicians().subscribe(technicians => {\n      if (technicians.length > 0) {\n        this.technicians = technicians;\n      }\n    });\n  }\n};\nWorkOrdersComponent = __decorate([Component({\n  selector: 'app-work-orders',\n  templateUrl: './work-orders.component.html',\n  styleUrls: ['./work-orders.component.css']\n})], WorkOrdersComponent);\nexport { WorkOrdersComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAMjD,SAASC,WAAW,QAAQ,gBAAgB;AAOrC,IAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAO9BC,YAAoBC,gBAAkC,EAAUC,iBAAoC,EAAUC,MAAc,EAAUC,WAAwB;IAA1I,qBAAgB,GAAhBH,gBAAgB;IAA4B,sBAAiB,GAAjBC,iBAAiB;IAA6B,WAAM,GAANC,MAAM;IAAkB,gBAAW,GAAXC,WAAW;IAFjJ,YAAO,GAAGN,WAAW;EAE6I;EAElK;;;;;EAKAO,QAAQ;IACN,IAAI,CAACC,iBAAiB,EAAE;IACxB,IAAI,CAACC,cAAc,EAAE;IACrB,IAAI,CAACC,aAAa,EAAE;EACtB;EAEA;;;EAGAC,gBAAgB;IACd,IAAI,CAACR,gBAAgB,CAACS,aAAa,EAAE,CAACC,SAAS,CAACC,UAAU,IAAG;MAC3D,IAAIA,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;QACzB,IAAI,CAACD,UAAU,GAAGA,UAAU;;IAEhC,CAAC,CAAC;EACJ;EAEA;;;EAGAN,iBAAiB;IACf,IAAI,CAACL,gBAAgB,CAACa,qBAAqB,CAAC,UAAU,CAAC,CAACH,SAAS,CAACC,UAAU,IAAG;MAC7E,IAAIA,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;QACzB,IAAI,CAACD,UAAU,GAAGA,UAAU;;IAEhC,CAAC,CAAC;EACJ;EAEA;;;EAGAE,qBAAqB,CAACC,MAAc;IAClC,IAAI,CAACd,gBAAgB,CAACa,qBAAqB,CAACC,MAAM,CAAC,CAACJ,SAAS,CAACC,UAAU,IAAG;MACzE,IAAIA,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;QACzB,IAAI,CAACD,UAAU,GAAGA,UAAU;;IAEhC,CAAC,CAAC;EACJ;EAEA;;;;;EAKAI,WAAW,CAACC,EAAU;IACpB,IAAI,CAACd,MAAM,CAACe,aAAa,CAAC,eAAe,GAAGD,EAAE,CAAC;EACjD;EAEA;;;;;EAKAE,UAAU,CAACF,EAAU;IACnB,IAAI,CAACd,MAAM,CAACe,aAAa,CAAC,aAAa,GAAGD,EAAE,CAAC;EAC/C;EAEA;;;EAGAG,YAAY;IACV;IACA;IACA;IACA;EAAA;EAGF;;;;EAIAZ,aAAa;IACX,IAAI,CAACP,gBAAgB,CAACoB,WAAW,EAAE,CAACV,SAAS,CAACW,QAAQ,IAAG;MACvD,IAAIA,QAAQ,CAACT,MAAM,GAAG,CAAC,EAAE;QACvB,IAAI,CAACS,QAAQ,GAAGA,QAAQ;;IAE5B,CAAC,CAAC;EACJ;EAEA;;;;EAIAf,cAAc;IACZ,IAAI,CAACL,iBAAiB,CAACK,cAAc,EAAE,CAACI,SAAS,CAACY,WAAW,IAAG;MAC9D,IAAIA,WAAW,CAACV,MAAM,GAAG,CAAC,EAAE;QAC1B,IAAI,CAACU,WAAW,GAAGA,WAAW;;IAElC,CAAC,CAAC;EACJ;CACD;AAxGYxB,mBAAmB,eAL/BF,SAAS,CAAC;EACT2B,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,GACW3B,mBAAmB,CAwG/B;SAxGYA,mBAAmB","names":["Component","FormsModule","WorkOrdersComponent","constructor","workOrderService","technicianService","router","formBuilder","ngOnInit","getOpenWorkOrders","getTechnicians","getStatusList","getAllWorkOrders","getWorkOrders","subscribe","workOrders","length","getFilteredWorkOrders","status","orderDetail","id","navigateByUrl","techDetail","addWorkOrder","getStatuses","statuses","technicians","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\bingh\\source\\repos\\WorkOrderProject\\WorkOrderProject\\ClientApp\\src\\app\\work-orders\\work-orders.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { WorkOrderService } from '../work-order.service';\nimport { WorkOrder } from '../work-order';\r\nimport { Router } from '@angular/router';\r\nimport { TechnicianService } from '../technician.service';\nimport { Technician } from '../technician';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-work-orders',\n  templateUrl: './work-orders.component.html',\n  styleUrls: ['./work-orders.component.css']\n})\nexport class WorkOrdersComponent implements OnInit {\n  statuses?: string[];\n  workOrders?: WorkOrder[];\n  technicians?: Technician[];\n  newOrder?: WorkOrder;\n  newform = FormsModule;\n\n  constructor(private workOrderService: WorkOrderService, private technicianService: TechnicianService, private router: Router, private formBuilder: FormBuilder) { }\n\n  /**\n   * Calls the getWorkOrders, getTechnicians, and getStatusList\n   * functions after the page loads to ensure the call doesn't\n   * return empty due the the page load order\n  */\n  ngOnInit(): void {\n    this.getOpenWorkOrders();\n    this.getTechnicians();\n    this.getStatusList();\n  }\n\n  /**\n   * Generates a list of all work orders from a table if records are available\r\n   */\n  getAllWorkOrders(): void {\n    this.workOrderService.getWorkOrders().subscribe(workOrders => {\n      if (workOrders.length > 0) {\n        this.workOrders = workOrders;\r\n      }\n    });\n  }\n\n  /** \n   * Generates a list of open work orders from a table if records are available\r\n   */\n  getOpenWorkOrders(): void {\n    this.workOrderService.getFilteredWorkOrders(\"Assigned\").subscribe(workOrders => {\n      if (workOrders.length > 0) { \n        this.workOrders = workOrders;\r\n      }\n    });\n  }\n\n  /**\n   * Filters the workorder query by status value\r\n   */\n  getFilteredWorkOrders(status: string) {\r\n    this.workOrderService.getFilteredWorkOrders(status).subscribe(workOrders => {\n      if (workOrders.length > 0) {\n        this.workOrders = workOrders;\r\n      }\n    });\n  }\n\n  /**\r\n   * Re-routes the user to a detailed page for the\n   * selected work order\n   * @param id\r\n   */\r\n  orderDetail(id: number) {\n    this.router.navigateByUrl('orders/order/' + id);\r\n  }\n\n  /**\r\n   * Re-routes the user to a detailed page for the\n   * selected technician\n   * @param id\r\n   */\n  techDetail(id: number) {\n    this.router.navigateByUrl('techs/tech/' + id);\r\n  }\n\n  /**\n   * This method updates the workorder table by adding a new record\n   */\n  addWorkOrder(): void {\n    // TODO  get new workorder number thru wo-service\n    //this.newOrder!.dateReceived = new Date();\n    //console.log(this.newOrder);\n    //this.workOrderService.createWorkOrder(this.newOrder!);\n  }\n\n  /**\n   * Returns a list of available statuses present in the workOrders\r\n   * table\r\n   */\n  getStatusList(): void {\n    this.workOrderService.getStatuses().subscribe(statuses => {\n      if (statuses.length > 0) {\n        this.statuses = statuses;\r\n      }\n    });\r\n  }\n\n  /**\n   * Returns a list of technicians available from the\r\n   * technicians table\r\n   */\n  getTechnicians(): void {\n    this.technicianService.getTechnicians().subscribe(technicians => {\n      if (technicians.length > 0) {\n        this.technicians = technicians;\r\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}