{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TechnicianService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      })\n    };\n    this.base = baseUrl;\n  }\n  getTechnicians() {\n    return this.http.get(this.base + \"technician\", this.httpOptions).pipe(catchError(this.handleError('getTechnicians', [])));\n  }\n  getTechnician(id) {\n    return this.http.get(this.base + 'technician/gettechnician?id=' + id).pipe(catchError(this.handleError('getTechnician techId = ${id}')));\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      return of(result);\n    };\n  } //code sourced from: https://angular.io/tutorial/tour-of-heroes/toh-pt6#heroes-and-http\n}\nTechnicianService.ɵfac = function TechnicianService_Factory(t) {\n  return new (t || TechnicianService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nTechnicianService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TechnicianService,\n  factory: TechnicianService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,QAAQ,gBAAgB;;;AAM3C,OAAM,MAAOC,iBAAiB;EAS5BC,YAAoBC,IAAgB,EAAsBC,OAAe;IAArD,SAAI,GAAJD,IAAI;IAPxB,gBAAW,GAAG;MACZE,OAAO,EAAE,IAAIP,WAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;QAClC,6BAA6B,EAAE;OAChC;KACF;IAE4E,IAAI,CAACQ,IAAI,GAAGF,OAAO;EAAE;EAElGG,cAAc;IACZ,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAe,IAAI,CAACF,IAAI,GAAG,YAAY,EAAE,IAAI,CAACG,WAAW,CAAC,CAACC,IAAI,CACjFV,UAAU,CAAC,IAAI,CAACW,WAAW,CAAe,gBAAgB,EAAE,EAAE,CAAC,CAAC,CACjE;EACH;EAEAC,aAAa,CAACC,EAAU;IACtB,OAAO,IAAI,CAACV,IAAI,CAACK,GAAG,CAAa,IAAI,CAACF,IAAI,GAAG,8BAA8B,GAAEO,EAAE,CAAC,CAACH,IAAI,CACnFV,UAAU,CAAC,IAAI,CAACW,WAAW,CAAa,8BAA8B,CAAC,CAAC,CACzE;EACH;EAEQA,WAAW,CAAIG,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAAG,OAAOjB,EAAE,CAACgB,MAAW,CAAC;IAAC,CAAC;EAClE,CAAC,CAAC;;AAzBSd,iBAAiB;mBAAjBA,iBAAiB,0CASkB,UAAU;AAAA;AAT7CA,iBAAiB;SAAjBA,iBAAiB;EAAAgB,SAAjBhB,iBAAiB;EAAAiB,YAFhB;AAAM","names":["HttpHeaders","of","catchError","TechnicianService","constructor","http","baseUrl","headers","base","getTechnicians","get","httpOptions","pipe","handleError","getTechnician","id","operation","result","error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\bingh\\source\\repos\\WorkOrderProject\\WorkOrderProject\\ClientApp\\src\\app\\technician.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Technician } from './technician';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TechnicianService {\n  base?: string;\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    })\n  };\n\n  constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string) { this.base = baseUrl; }\n\n  getTechnicians(): Observable<Technician[]> {\n    return this.http.get<Technician[]>(this.base + \"technician\", this.httpOptions).pipe(\n      catchError(this.handleError<Technician[]>('getTechnicians', []))\n    );\n  }\n\n  getTechnician(id: number): Observable<Technician> {\n    return this.http.get<Technician>(this.base + 'technician/gettechnician?id='+ id).pipe(\n      catchError(this.handleError<Technician>('getTechnician techId = ${id}'))\n    );\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => { return of(result as T) };\n  } //code sourced from: https://angular.io/tutorial/tour-of-heroes/toh-pt6#heroes-and-http\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}