{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet WorkOrdersComponent = class WorkOrdersComponent {\n  //creates a form with similar values as the WorkOrder interface for easy mapping\n  constructor(workOrderService, technicianService, router, formBuilder, rfm) {\n    this.workOrderService = workOrderService;\n    this.technicianService = technicianService;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.rfm = rfm;\n    this.newOrderForm = this.formBuilder.group({\n      woNum: null,\n      contactName: null,\n      email: [null, Validators.email, Validators.pattern('^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z])$')],\n      contactNumber: null,\n      dateReceived: null,\n      technicianId: null,\n      dateAssigned: null,\n      problem: null,\n      status: null,\n      dateComplete: null,\n      techComments: null\n    });\n  }\n  /**\r\n   * Calls the getWorkOrders, getTechnicians, and getStatusList\r\n   * functions after the page loads to ensure the call doesn't\r\n   * return empty due the the page load order\r\n  */\n  ngOnInit() {\n    this.getOpenWorkOrders();\n    this.getTechnicians();\n    this.getStatusList();\n  }\n  /**\r\n   * Generates a list of open work orders from a table if records are available\r\n   */\n  getOpenWorkOrders() {\n    this.workOrderService.getFilteredWorkOrders(\"Assigned\").subscribe(workOrders => {\n      if (workOrders.length > 0) {\n        this.workOrders = workOrders;\n      }\n    });\n  }\n  /**\r\n   * Generates a list of all work orders from a table if records are available\r\n   */\n  getAllWorkOrders() {\n    this.workOrderService.getWorkOrders().subscribe(workOrders => {\n      if (workOrders.length > 0) {\n        this.workOrders = workOrders;\n      }\n    });\n  }\n  /**\r\n   * Filters the workorder query by status value\r\n   */\n  getFilteredWorkOrders(status) {\n    this.workOrderService.getFilteredWorkOrders(status).subscribe(workOrders => {\n      if (workOrders.length > 0) {\n        this.workOrders = workOrders;\n      }\n    });\n  }\n  /**\r\n   * Returns a list of available statuses present in the workOrders\r\n   * table\r\n   */\n  getStatusList() {\n    this.workOrderService.getStatuses().subscribe(statuses => {\n      if (statuses.length > 0) {\n        this.statuses = statuses;\n      }\n    });\n  }\n  /**\r\n   * Returns a list of technicians available from the\r\n   * technicians table\r\n   */\n  getTechnicians() {\n    this.technicianService.getTechnicians().subscribe(technicians => {\n      if (technicians.length > 0) {\n        this.technicians = technicians;\n      }\n    });\n  }\n  /**\r\n   * Re-routes the user to a detailed page for the\r\n   * selected work order\r\n   * @param id\r\n   */\n  orderDetail(id) {\n    this.router.navigateByUrl('orders/order/' + id);\n  }\n  /**\r\n   * Re-routes the user to a detailed page for the\r\n   * selected technician\r\n   * @param id\r\n   */\n  techDetail(id) {\n    this.router.navigateByUrl('techs/tech/' + id);\n  }\n  /**\r\n   * This method updates the workorder table by adding a new record\r\n   */\n  addWorkOrder() {\n    // TODO  get new workorder number thru wo-service\n    var current_time = new Date(); // captures current time\n    this.newOrderForm.controls.dateReceived.setValue(current_time);\n    this.newOrderForm.controls.status.setValue(\"Assigned\");\n    //sets expected values for the work order's status and date received values \n    if (this.newOrderForm.controls.technicianId.value !== null) {\n      this.newOrderForm.controls.dateAssigned.setValue(current_time);\n    } //sets the assigned date if and only a technicina has been set\n    this.getNewWONum();\n    // helps set the new wo number since scoping issues will not allow property assignment\n  }\n  /**\r\n   * Produces a new work order number to assign to a newly created\r\n   * work order and then submits it\r\n   */\n  getNewWONum() {\n    this.workOrderService.getNewWONum().subscribe(woNum => {\n      this.newOrderForm.controls.woNum.setValue(woNum);\n      //this.workOrderService.createWorkOrder(this.newOrderForm.value as WorkOrder);\n      //solution for interface mapping found on: https://stackoverflow.com/questions/44708240/mapping-formgroup-to-interface-object\n    });\n  }\n};\n\nWorkOrdersComponent = __decorate([Component({\n  selector: 'app-work-orders',\n  templateUrl: './work-orders.component.html',\n  styleUrls: ['./work-orders.component.css']\n})], WorkOrdersComponent);\nexport { WorkOrdersComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","WorkOrdersComponent","constructor","workOrderService","technicianService","router","formBuilder","rfm","group","woNum","contactName","email","pattern","contactNumber","dateReceived","technicianId","dateAssigned","problem","status","dateComplete","techComments","ngOnInit","getOpenWorkOrders","getTechnicians","getStatusList","getFilteredWorkOrders","subscribe","workOrders","length","getAllWorkOrders","getWorkOrders","getStatuses","statuses","technicians","orderDetail","id","navigateByUrl","techDetail","addWorkOrder","current_time","Date","newOrderForm","controls","setValue","value","getNewWONum","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\bingh\\source\\repos\\WorkOrderProject\\WorkOrderProject\\ClientApp\\src\\app\\work-orders\\work-orders.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { WorkOrderService } from '../work-order.service';\nimport { WorkOrder } from '../work-order';\r\nimport { Router } from '@angular/router';\r\nimport { TechnicianService } from '../technician.service';\nimport { Technician } from '../technician';\nimport { FormsModule, FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-work-orders',\n  templateUrl: './work-orders.component.html',\n  styleUrls: ['./work-orders.component.css']\n})\nexport class WorkOrdersComponent implements OnInit {\n  statuses?: string[];\n  workOrders?: WorkOrder[];\n  technicians?: Technician[];\n\n  newOrderForm = this.formBuilder.group({\n    woNum: <number|null>(null),\n    contactName: <string | null>(null),\r\n    email: [<string | null>(null), Validators.email, Validators.pattern('^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z])$')],\r\n    contactNumber: <string|null>(null),\r\n    dateReceived: <Date|null>(null),\r\n    technicianId: <number|null>(null),\r\n    dateAssigned: <Date|null>(null),\r\n    problem: <string|null>(null),\r\n    status: <string|null>(null),\r\n    dateComplete: <Date|null>(null),\r\n    techComments: <string|null>(null)\r\n  });\n  //creates a form with similar values as the WorkOrder interface for easy mapping\n\n  constructor(private workOrderService: WorkOrderService, private technicianService: TechnicianService, private router: Router, private formBuilder: FormBuilder, private rfm: ReactiveFormsModule) { }\n\n  /**\n   * Calls the getWorkOrders, getTechnicians, and getStatusList\n   * functions after the page loads to ensure the call doesn't\n   * return empty due the the page load order\n  */\n  ngOnInit(): void {\n    this.getOpenWorkOrders();\n    this.getTechnicians();\n    this.getStatusList();\n  }\n\n  /** \n   * Generates a list of open work orders from a table if records are available\r\n   */\n  getOpenWorkOrders(): void {\n    this.workOrderService.getFilteredWorkOrders(\"Assigned\").subscribe(workOrders => {\n      if (workOrders.length > 0) { \n        this.workOrders = workOrders;\r\n      }\n    });\n  }\n\n  /**\n   * Generates a list of all work orders from a table if records are available\r\n   */\n  getAllWorkOrders(): void {\n    this.workOrderService.getWorkOrders().subscribe(workOrders => {\n      if (workOrders.length > 0) {\n        this.workOrders = workOrders;\r\n      }\n    });\n  }\n\n  /**\n   * Filters the workorder query by status value\r\n   */\n  getFilteredWorkOrders(status: string) {\r\n    this.workOrderService.getFilteredWorkOrders(status).subscribe(workOrders => {\n      if (workOrders.length > 0) {\n        this.workOrders = workOrders;\r\n      }\n    });\n  }\n\n  /**\n   * Returns a list of available statuses present in the workOrders\r\n   * table\r\n   */\n  getStatusList(): void {\n    this.workOrderService.getStatuses().subscribe(statuses => {\n      if (statuses.length > 0) {\n        this.statuses = statuses;\r\n      }\n    });\r\n  }\n\n  /**\n   * Returns a list of technicians available from the\r\n   * technicians table\r\n   */\n  getTechnicians(): void {\n    this.technicianService.getTechnicians().subscribe(technicians => {\n      if (technicians.length > 0) {\n        this.technicians = technicians;\r\n      }\n    });\n  }\n\r\n  /**\r\n   * Re-routes the user to a detailed page for the\n   * selected work order\n   * @param id\r\n   */\r\n  orderDetail(id: number) {\n    this.router.navigateByUrl('orders/order/' + id);\r\n  }\n\n  /**\r\n   * Re-routes the user to a detailed page for the\n   * selected technician\n   * @param id\r\n   */\n  techDetail(id: number) {\n    this.router.navigateByUrl('techs/tech/' + id);\r\n  }\n\n  /**\n   * This method updates the workorder table by adding a new record\n   */\n  addWorkOrder() {\n    // TODO  get new workorder number thru wo-service\n    var current_time = new Date(); // captures current time\r\n\r\n    this.newOrderForm.controls.dateReceived.setValue(current_time);\n    this.newOrderForm.controls.status.setValue(\"Assigned\");\n    //sets expected values for the work order's status and date received values \n\n    if ((this.newOrderForm.controls.technicianId.value !== null)) {\n      this.newOrderForm.controls.dateAssigned.setValue(current_time);\n    }  //sets the assigned date if and only a technicina has been set\n\n    this.getNewWONum();\n    // helps set the new wo number since scoping issues will not allow property assignment\n  }\n\n  /**\n   * Produces a new work order number to assign to a newly created\r\n   * work order and then submits it\r\n   */\n  getNewWONum() {\n    this.workOrderService.getNewWONum().subscribe( woNum =>\r\n    {\r\n      this.newOrderForm.controls.woNum.setValue(woNum);\r\n      //this.workOrderService.createWorkOrder(this.newOrderForm.value as WorkOrder);\n      //solution for interface mapping found on: https://stackoverflow.com/questions/44708240/mapping-formgroup-to-interface-object\n   });\r\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}