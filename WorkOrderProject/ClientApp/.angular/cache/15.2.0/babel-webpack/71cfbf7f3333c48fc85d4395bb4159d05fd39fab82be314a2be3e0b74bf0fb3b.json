{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WorkOrderService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.httpOptions = {\n      header: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /**\r\n   * Retrieves all items from the workorder table\r\n   * @returns An `Obseverable` array of type `WorkOrder`\r\n   */\n  getWorkOrders() {\n    return this.http.get(this.baseUrl + \"getworkorders\").pipe(catchError(this.handleError('getWorkOrders', [])));\n  }\n  /**\r\n   * Retrieves the filtered work order list from the database by matching the\r\n   * technicianId\r\n   * @param techId This will be the filter for the returned list\r\n   * @returns An `Obseverable` array of type `WorkOrder`\r\n   */\n  getFilteredWorkOrders(techId) {\n    return this.http.get(\"getworkorder\").pipe(catchError(this.handleError('getFilteredWorkOrders', [])));\n  }\n  /**\r\n   *\r\n   * @param id Serves as a filter to aid with web app routing\r\n   * @returns\r\n   */\n  getWorkOrder(id) {\n    const url = '${this.workOrdersUrl}/${id}';\n    return this.http.get(url).pipe(catchError(this.handleError('getWorkOrder woId = ${id}')));\n  }\n  /**\r\n   *\r\n   * @param operation\r\n   * @param result\r\n   * @returns\r\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      return of(result);\n    };\n  } //code sourced from: https://angular.io/tutorial/tour-of-heroes/toh-pt6#heroes-and-http\n}\nWorkOrderService.ɵfac = function WorkOrderService_Factory(t) {\n  return new (t || WorkOrderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nWorkOrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WorkOrderService,\n  factory: WorkOrderService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,QAAkB,gBAAgB;;;AAMrD,OAAM,MAAOC,gBAAgB;EAK3BC,YAAoBC,IAAgB,EAAsBC,OAAe;IAArD,SAAI,GAAJD,IAAI;IAJxB,gBAAW,GAAG;MACZE,MAAM,EAAE,IAAIP,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAC/D;EAE4E;EAG7E;;;;EAIAQ,aAAa;IACX,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAc,IAAI,CAACH,OAAO,GAAG,eAAe,CAAC,CAACI,IAAI,CACpER,UAAU,CAAC,IAAI,CAACS,WAAW,CAAc,eAAe,EAAE,EAAE,CAAC,CAAC,CAC/D;EACH;EAEA;;;;;;EAMAC,qBAAqB,CAACC,MAAc;IAClC,OAAO,IAAI,CAACR,IAAI,CAACI,GAAG,CAAc,cAAc,CAAC,CAACC,IAAI,CACpDR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAc,uBAAuB,EAAE,EAAE,CAAC,CAAC,CACvE;EACH;EAGA;;;;;EAKAG,YAAY,CAACC,EAAU;IACrB,MAAMC,GAAG,GAAG,6BAA6B;IACzC,OAAO,IAAI,CAACX,IAAI,CAACI,GAAG,CAAYO,GAAG,CAAC,CAACN,IAAI,CACvCR,UAAU,CAAC,IAAI,CAACS,WAAW,CAAY,2BAA2B,CAAC,CAAC,CACrE;EACH;EAEA;;;;;;EAMQA,WAAW,CAAIM,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAAG,OAAOlB,EAAE,CAACiB,MAAW,CAAC;IAAC,CAAC;EAClE,CAAC,CAAC;;AAnDSf,gBAAgB;mBAAhBA,gBAAgB,0CAKmB,UAAU;AAAA;AAL7CA,gBAAgB;SAAhBA,gBAAgB;EAAAiB,SAAhBjB,gBAAgB;EAAAkB,YAFf;AAAM","names":["HttpHeaders","of","catchError","WorkOrderService","constructor","http","baseUrl","header","getWorkOrders","get","pipe","handleError","getFilteredWorkOrders","techId","getWorkOrder","id","url","operation","result","error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\bingh\\source\\repos\\WorkOrderProject\\WorkOrderProject\\ClientApp\\src\\app\\work-order.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { WorkOrder } from './work-order';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WorkOrderService {\n  httpOptions = {\n    header: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string) { }\n\n\n  /**\r\n   * Retrieves all items from the workorder table\n   * @returns An `Obseverable` array of type `WorkOrder`\r\n   */\r\n  getWorkOrders(): Observable<WorkOrder[]> {\n    return this.http.get<WorkOrder[]>(this.baseUrl + \"getworkorders\").pipe(\n      catchError(this.handleError<WorkOrder[]>('getWorkOrders', []))\n    );\n  }\n\n  /**\r\n   * Retrieves the filtered work order list from the database by matching the\n   * technicianId\n   * @param techId This will be the filter for the returned list\r\n   * @returns An `Obseverable` array of type `WorkOrder`\r\n   */\r\n  getFilteredWorkOrders(techId: number): Observable<WorkOrder[]> {\n    return this.http.get<WorkOrder[]>(\"getworkorder\").pipe(\n      catchError(this.handleError<WorkOrder[]>('getFilteredWorkOrders', []))\n    );\n  }\n\n\n  /**\r\n   * \n   * @param id Serves as a filter to aid with web app routing\r\n   * @returns \r\n   */\r\n  getWorkOrder(id: number): Observable<WorkOrder> {\n    const url = '${this.workOrdersUrl}/${id}';\n    return this.http.get<WorkOrder>(url).pipe(\n      catchError(this.handleError<WorkOrder>('getWorkOrder woId = ${id}'))\n    );\n  }\n\n  /**\r\n   * \n   * @param operation\r\n   * @param result\r\n   * @returns\r\n   */\r\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => { return of(result as T) };\n  } //code sourced from: https://angular.io/tutorial/tour-of-heroes/toh-pt6#heroes-and-http\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}