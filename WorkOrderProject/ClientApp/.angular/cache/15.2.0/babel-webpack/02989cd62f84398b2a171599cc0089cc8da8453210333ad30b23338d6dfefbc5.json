{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet TechnicianDetailComponent = class TechnicianDetailComponent {\n  constructor(router, route, technicianService, workOrderService, location) {\n    this.router = router;\n    this.route = route;\n    this.technicianService = technicianService;\n    this.workOrderService = workOrderService;\n    this.location = location;\n    this.id = Number(this.route.snapshot.paramMap.get('id'));\n  }\n  /**\r\n   * Calls the getTechnician function after the page loads\r\n   * to ensure the call doesn't return empty due the the page load order\r\n  */\n  ngOnInit() {\n    this.getTechnician();\n  }\n  /**\r\n   * Generates the technician.id by capturing the `:id` from the URI slug.\r\n   * If that technician does not exist, the web app will re-route to a 404 page.\r\n  */\n  getTechnician() {\n    this.technicianService.getTechnician(this.id).subscribe(technician => {\n      if (technician) {\n        this.technician = technician;\n      } else {\n        this.error404();\n      }\n    });\n  }\n  /*getWorkOrders(): void {\r\n    this.workOrderService.getFilteredWorkOrders(this.id).subscribe(workOrders => this.workOrders= workOrders);\r\n  }*/\n  /**\r\n   * This method creates a simple route to the previous page\r\n  */\n  goBack() {\n    this.location.back(); //causes browser to go to root\n  }\n  /**\r\n    *This method attempts to redirect to the 404 page if the workOrder does not exist\r\n  */\n  error404() {\n    this.router.navigateByUrl('404');\n  }\n};\nTechnicianDetailComponent = __decorate([Component({\n  selector: 'app-technician-detail',\n  templateUrl: './technician-detail.component.html',\n  styleUrls: ['./technician-detail.component.css']\n})], TechnicianDetailComponent);\nexport { TechnicianDetailComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAe1C,IAAMC,yBAAyB,GAA/B,MAAMA,yBAAyB;EAKpCC,YAAoBC,MAAc,EAAUC,KAAqB,EAAUC,iBAAoC,EAAUC,gBAAkC,EAAUC,QAAkB;IAAnK,WAAM,GAANJ,MAAM;IAAkB,UAAK,GAALC,KAAK;IAA0B,sBAAiB,GAAjBC,iBAAiB;IAA6B,qBAAgB,GAAhBC,gBAAgB;IAA4B,aAAQ,GAARC,QAAQ;IAC3K,IAAI,CAACC,EAAE,GAAGC,MAAM,CAAC,IAAI,CAACL,KAAK,CAACM,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC,CAAC;EAC1D;EAEA;;;;EAIAC,QAAQ;IACN,IAAI,CAACC,aAAa,EAAE;EACtB;EAEA;;;;EAIAA,aAAa;IACX,IAAI,CAACT,iBAAiB,CAACS,aAAa,CAAC,IAAI,CAACN,EAAE,CAAC,CAACO,SAAS,CAACC,UAAU,IAAG;MACnE,IAAIA,UAAU,EAAE;QACd,IAAI,CAACA,UAAU,GAAGA,UAAU;OAC7B,MAAM;QACL,IAAI,CAACC,QAAQ,EAAE;;IAEnB,CAAC,CAAC;EACJ;EAEA;;;EAIA;;;EAGAC,MAAM;IACJ,IAAI,CAACX,QAAQ,CAACY,IAAI,EAAE,CAAC,CAAC;EAC1B;EAEE;;;EAGAF,QAAQ;IACN,IAAI,CAACd,MAAM,CAACiB,aAAa,CAAC,KAAK,CAAC;EAClC;CACD;AAhDYnB,yBAAyB,eANrCD,SAAS,CAAC;EACTqB,QAAQ,EAAE,uBAAuB;EACjCC,WAAW,EAAE,oCAAoC;EACjDC,SAAS,EAAE,CAAC,mCAAmC;CAChD,CAAC,GAEWtB,yBAAyB,CAgDrC;SAhDYA,yBAAyB","names":["Component","TechnicianDetailComponent","constructor","router","route","technicianService","workOrderService","location","id","Number","snapshot","paramMap","get","ngOnInit","getTechnician","subscribe","technician","error404","goBack","back","navigateByUrl","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\bingh\\source\\repos\\WorkOrderProject\\WorkOrderProject\\ClientApp\\src\\app\\technician-detail\\technician-detail.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { TechnicianService } from '../technician.service';\nimport { Technician } from '../technician';\nimport { WorkOrder } from '../work-order';\nimport { WorkOrderService } from '../work-order.service';\nimport { Router } from '@angular/router';\r\n\n@Component({\n  selector: 'app-technician-detail',\n  templateUrl: './technician-detail.component.html',\n  styleUrls: ['./technician-detail.component.css']\n})\n\nexport class TechnicianDetailComponent implements OnInit {\n  id: number;\n  technician?: Technician;\n  workOrders?: WorkOrder[];\n\n  constructor(private router: Router, private route: ActivatedRoute, private technicianService: TechnicianService, private workOrderService: WorkOrderService, private location: Location) {\n    this.id = Number(this.route.snapshot.paramMap.get('id'));\n  }\n\n  /**\n   * Calls the getTechnician function after the page loads\n   * to ensure the call doesn't return empty due the the page load order\n  */\n  ngOnInit(): void {\n    this.getTechnician();\n  }\n\n  /**\n   * Generates the technician.id by capturing the `:id` from the URI slug.\n   * If that technician does not exist, the web app will re-route to a 404 page.\n  */\n  getTechnician(): void {\n    this.technicianService.getTechnician(this.id).subscribe(technician => {\n      if (technician) {\r\n        this.technician = technician;\r\n      } else {\r\n        this.error404();\r\n      }\r\n    });\n  }\n\n  /*getWorkOrders(): void {\r\n    this.workOrderService.getFilteredWorkOrders(this.id).subscribe(workOrders => this.workOrders= workOrders);\n  }*/\n\n  /**\n   * This method creates a simple route to the previous page\n  */\n  goBack(): void {\n    this.location.back(); //causes browser to go to root\n}\n\n  /**\n    *This method attempts to redirect to the 404 page if the workOrder does not exist\n  */\n  error404(): void {\n    this.router.navigateByUrl('404');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}