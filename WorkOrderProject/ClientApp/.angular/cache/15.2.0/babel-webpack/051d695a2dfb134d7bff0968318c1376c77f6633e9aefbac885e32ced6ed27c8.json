{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WorkOrderService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      })\n    };\n    this.base = baseUrl;\n  }\n  /**\r\n   * Retrieves all items from the workorder table\r\n   * @returns An `Obseverable` array of type `WorkOrder`\r\n   */\n  getWorkOrders() {\n    return this.http.get(this.base + \"workorder/getworkorders\", this.httpOptions).pipe(catchError(this.handleError('getWorkOrders', [])));\n  }\n  /**\r\n   * Retrieves the filtered work order list from the database by matching the status.\r\n   * @param techId This will be the filter for the returned list\r\n   * @returns An `Obseverable` array of type `WorkOrder`\r\n   */\n  getFilteredWorkOrders(status) {\n    return this.http.get(this.base + \"workorder/getworkordersbystatus?status=\" + status).pipe(catchError(this.handleError('getFilteredWorkOrders', [])));\n  }\n  /**\r\n   * Retrieves a list of work orders assigned to a specific technician\r\n   * @param id\r\n   * @returns\r\n   */\n  getTechOrders(id) {\n    return this.http.get(this.base + \"workorder/gettechorders?id=\" + id).pipe(catchError(this.handleError('getTechOrders', [])));\n  }\n  /**\r\n   * Retrieves a list of work order statuses available in the database.\r\n   * @returns A string array of values if any are present\r\n   */\n  getStatuses() {\n    return this.http.get(this.base + \"workorder/getstatuses\").pipe(catchError(this.handleError('getStatuses', [])));\n  }\n  /**\r\n   * Produces a single record given an ID filter\r\n   * @param id An ID filter to identify the correct record\r\n   * @returns A single record of type [WorkOrder] if one matching the criteria is present\r\n   */\n  getWorkOrder(id) {\n    return this.http.get(this.base + 'workorder/getworkorder?id=' + id).pipe(catchError(this.handleError('getWorkOrder woId = ${id}')));\n  }\n  /**\r\n   * Sends a new work order to an API to be added to the workorders database.\r\n   * @param workOrder\r\n   */\n  createWorkOrder(workOrder) {\n    var headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Access-Control-Allow-Origin': '*'\n    });\n    this.http.post(this.base + 'workorder/createneworder', workOrder, {\n      headers: headers\n    });\n  } //post info and headers solution from: https://stackoverflow.com/questions/54091284/asp-net-core-angular-7-http-post-requires-complex-object\n  /**\r\n   *   httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    })\r\n  };\r\n       */\n  /**\r\n   * Produces a new work order number\r\n   * @returns A work order number\r\n   */\n  getNewWONum() {\n    return this.http.get(this.base + 'workorder/setworkordernumber', this.httpOptions).pipe(catchError(this.handleError('getNewWONum')));\n  }\n  /**\r\n   * Handles errors from back-end requests to allow the app to still\r\n   * run without crashing\r\n   * @param operation The name of the operation that failed\r\n   * @param result An optional list of error results\r\n   * @returns A list of results if one was requested by the service\r\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      return of(result);\n    };\n  } //code sourced from: https://angular.io/tutorial/tour-of-heroes/toh-pt6#heroes-and-http\n}\nWorkOrderService.ɵfac = function WorkOrderService_Factory(t) {\n  return new (t || WorkOrderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nWorkOrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WorkOrderService,\n  factory: WorkOrderService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,QAAQ,gBAAgB;;;AAM3C,OAAM,MAAOC,gBAAgB;EAS3BC,YAAoBC,IAAgB,EAAsBC,OAAe;IAArD,SAAI,GAAJD,IAAI;IARxB,gBAAW,GAAG;MACZE,OAAO,EAAE,IAAIP,WAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;QAClC,6BAA6B,EAAE;OAChC;KACF;IAG4E,IAAI,CAACQ,IAAI,GAAGF,OAAO;EAAE;EAGlG;;;;EAIAG,aAAa;IACX,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAc,IAAI,CAACF,IAAI,GAAG,yBAAyB,EAAE,IAAI,CAACG,WAAW,CAAC,CAACC,IAAI,CAC7FV,UAAU,CAAC,IAAI,CAACW,WAAW,CAAc,eAAe,EAAE,EAAE,CAAC,CAAC,CAC/D;EACH;EAEA;;;;;EAKAC,qBAAqB,CAACC,MAAc;IAClC,OAAO,IAAI,CAACV,IAAI,CAACK,GAAG,CAAc,IAAI,CAACF,IAAI,GAAG,yCAAyC,GAAGO,MAAM,CAAC,CAACH,IAAI,CACpGV,UAAU,CAAC,IAAI,CAACW,WAAW,CAAc,uBAAuB,EAAE,EAAE,CAAC,CAAC,CACvE;EACH;EAEA;;;;;EAKAG,aAAa,CAACC,EAAU;IACtB,OAAO,IAAI,CAACZ,IAAI,CAACK,GAAG,CAAc,IAAI,CAACF,IAAI,GAAG,6BAA6B,GAAGS,EAAE,CAAC,CAACL,IAAI,CACpFV,UAAU,CAAC,IAAI,CAACW,WAAW,CAAc,eAAe,EAAE,EAAE,CAAC,CAAC,CAC/D;EACH;EAEA;;;;EAIAK,WAAW;IACT,OAAO,IAAI,CAACb,IAAI,CAACK,GAAG,CAAW,IAAI,CAACF,IAAI,GAAG,uBAAuB,CAAC,CAACI,IAAI,CACtEV,UAAU,CAAC,IAAI,CAACW,WAAW,CAAW,aAAa,EAAE,EAAE,CAAC,CAAC,CAC1D;EACH;EAEA;;;;;EAKAM,YAAY,CAACF,EAAU;IACrB,OAAO,IAAI,CAACZ,IAAI,CAACK,GAAG,CAAY,IAAI,CAACF,IAAI,GAAG,4BAA4B,GAAGS,EAAE,CAAC,CAACL,IAAI,CACjFV,UAAU,CAAC,IAAI,CAACW,WAAW,CAAY,2BAA2B,CAAC,CAAC,CACrE;EACH;EAEA;;;;EAIAO,eAAe,CAACC,SAAoB;IAClC,IAAId,OAAO,GAAG,IAAIP,WAAW,CAAC;MAC5B,cAAc,EAAE,mCAAmC;MACnD,6BAA6B,EAAE;KAChC,CAAC;IACF,IAAI,CAACK,IAAI,CAACiB,IAAI,CAAY,IAAI,CAACd,IAAI,GAAG,0BAA0B,EAAEa,SAAS,EAAE;MAAEd,OAAO,EAAEA;IAAO,CAAE,CAAC;EACpG,CAAC,CAAC;EACF;;;;;;;EAQA;;;;EAIAgB,WAAW;IACT,OAAO,IAAI,CAAClB,IAAI,CAACK,GAAG,CAAS,IAAI,CAACF,IAAI,GAAG,8BAA8B,EAAE,IAAI,CAACG,WAAW,CAAC,CAACC,IAAI,CAC7FV,UAAU,CAAC,IAAI,CAACW,WAAW,CAAS,aAAa,CAAC,CAAC,CACpD;EACH;EAEA;;;;;;;EAOQA,WAAW,CAAIW,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAAG,OAAOzB,EAAE,CAACwB,MAAW,CAAC;IAAC,CAAC;EAClE,CAAC,CAAC;;AAvGStB,gBAAgB;mBAAhBA,gBAAgB,0CASmB,UAAU;AAAA;AAT7CA,gBAAgB;SAAhBA,gBAAgB;EAAAwB,SAAhBxB,gBAAgB;EAAAyB,YAFf;AAAM","names":["HttpHeaders","of","catchError","WorkOrderService","constructor","http","baseUrl","headers","base","getWorkOrders","get","httpOptions","pipe","handleError","getFilteredWorkOrders","status","getTechOrders","id","getStatuses","getWorkOrder","createWorkOrder","workOrder","post","getNewWONum","operation","result","error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\bingh\\source\\repos\\WorkOrderProject\\WorkOrderProject\\ClientApp\\src\\app\\work-order.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { WorkOrder } from './work-order';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WorkOrderService {\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    })\n  };\n  base?: string;\n\n  constructor(private http: HttpClient, @Inject('BASE_URL') baseUrl: string) { this.base = baseUrl; }\n\n\n  /**\r\n   * Retrieves all items from the workorder table\n   * @returns An `Obseverable` array of type `WorkOrder`\r\n   */\r\n  getWorkOrders(): Observable<WorkOrder[]> {\n    return this.http.get<WorkOrder[]>(this.base + \"workorder/getworkorders\", this.httpOptions).pipe(\n      catchError(this.handleError<WorkOrder[]>('getWorkOrders', []))\n    );\n  }\n\n  /**\r\n   * Retrieves the filtered work order list from the database by matching the status.\n   * @param techId This will be the filter for the returned list\r\n   * @returns An `Obseverable` array of type `WorkOrder`\r\n   */\r\n  getFilteredWorkOrders(status: string): Observable<WorkOrder[]> {\n    return this.http.get<WorkOrder[]>(this.base + \"workorder/getworkordersbystatus?status=\" + status).pipe(\n      catchError(this.handleError<WorkOrder[]>('getFilteredWorkOrders', []))\n    );\n  }\n\n  /**\r\n   * Retrieves a list of work orders assigned to a specific technician\n   * @param id\r\n   * @returns\r\n   */\r\n  getTechOrders(id: number): Observable<WorkOrder[]> {\n    return this.http.get<WorkOrder[]>(this.base + \"workorder/gettechorders?id=\" + id).pipe(\n      catchError(this.handleError<WorkOrder[]>('getTechOrders', []))\n    );\r\n  }\n\n  /**\r\n   * Retrieves a list of work order statuses available in the database.\n   * @returns A string array of values if any are present\r\n   */\r\n  getStatuses(): Observable<string[]> {\n    return this.http.get<string[]>(this.base + \"workorder/getstatuses\").pipe(\n      catchError(this.handleError<string[]>('getStatuses', []))\n    );\n  }\n\n  /**\r\n   * Produces a single record given an ID filter\n   * @param id An ID filter to identify the correct record\r\n   * @returns A single record of type [WorkOrder] if one matching the criteria is present\r\n   */\r\n  getWorkOrder(id: number): Observable<WorkOrder> {\n    return this.http.get<WorkOrder>(this.base + 'workorder/getworkorder?id=' + id).pipe(\n      catchError(this.handleError<WorkOrder>('getWorkOrder woId = ${id}'))\n    );\n  }\n\n  /**\r\n   * Sends a new work order to an API to be added to the workorders database.\n   * @param workOrder\r\n   */\r\n  createWorkOrder(workOrder: WorkOrder): void {\n    var headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n      'Access-Control-Allow-Origin': '*'\n    });\n    this.http.post<WorkOrder>(this.base + 'workorder/createneworder', workOrder, { headers: headers });\r\n  } //post info and headers solution from: https://stackoverflow.com/questions/54091284/asp-net-core-angular-7-http-post-requires-complex-object\n  /**\n   *   httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    })\n  };\n\r\n   */\n  /**\r\n   * Produces a new work order number \n   * @returns A work order number\r\n   */\r\n  getNewWONum(): Observable<number> {\n    return this.http.get<number>(this.base + 'workorder/setworkordernumber', this.httpOptions).pipe(\n      catchError(this.handleError<number>('getNewWONum'))\n    );\r\n  }\n\n  /**\r\n   * Handles errors from back-end requests to allow the app to still\n   * run without crashing\n   * @param operation The name of the operation that failed\r\n   * @param result An optional list of error results\r\n   * @returns A list of results if one was requested by the service\r\n   */\r\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => { return of(result as T) };\n  } //code sourced from: https://angular.io/tutorial/tour-of-heroes/toh-pt6#heroes-and-http\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}